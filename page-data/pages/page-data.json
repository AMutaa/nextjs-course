{"componentChunkName":"component---src-templates-lesson-template-js","path":"/pages","result":{"data":{"markdownRemark":{"html":"<p>You don't need to interact with a router directly to create pages. Next.js has built on conventions to make creating routes as easy as creating a file 🤙🏾.</p>\n<p>To get started, create a directory on your called <code class=\"language-text\">/pages</code>. Next.js will associate any file in this directory as a route. The file names determine the route name or pattern, and whatever component is exported is the actual page.</p>\n<p>Now let's create an index route by creating a file: <code class=\"language-text\">/pages/index.jsx</code>.</p>\n<p>Next, let's create a component and export it:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Index Page</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Start your dev server:</p>\n<p><strong>npm</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> run dev</code></pre></div>\n<p><strong>yarn</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">yarn</span> dev</code></pre></div>\n<p>We should now be able to navigate the browser to the index route of our app and see our h1's content. I really appreciate conventions like this that make developing apps that much more fun!</p>\n<p>Ok, big deal, we created an index page, but what about paths like <code class=\"language-text\">myapp.com/project/settings</code> and <code class=\"language-text\">myapp.com/user/1</code> where <code class=\"language-text\">1</code> is a parameter? Don't even trip; Next.js has you covered there.</p>\n<h2 id=\"folders-and-routes\" style=\"position:relative;\"><a href=\"#folders-and-routes\" aria-label=\"folders and routes permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" fill=\"currentColor\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Folders and routes</h2>\n<p>To create a path like <code class=\"language-text\">/project/settings</code> we can use folders in our <code class=\"language-text\">/pages</code> directory.\nFor our note taking app, we need the following routes for now:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">index =&gt; /\nall notes =&gt; /notes\none note =&gt; /notes/:id</code></pre></div>\n<p>We already created the index route; let's create the all notes route:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pages\n  notes\n    index.jsx</code></pre></div>\n<p>By adding an <code class=\"language-text\">index</code> page in a folder, we're telling Next.js that we want this component to be the index route for this path. So in this case, navigating to <code class=\"language-text\">/notes</code> will render the <code class=\"language-text\">pages/notes/index.jsx</code> component.</p>\n<p>Here's a placeholder component for that page that you can use.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Notes</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<blockquote>\n<p>🧠   <strong>reminder</strong>: We'll fill these pages out later with some excellent copy and pasting.</p>\n</blockquote>\n<h2 id=\"dynamic-routes\" style=\"position:relative;\"><a href=\"#dynamic-routes\" aria-label=\"dynamic routes permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" fill=\"currentColor\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dynamic routes</h2>\n<p>Next.js makes it easy to create dynamic routes. Depending on if and how you want those pages to be prerendered will determine how you set them up. We're going to focus on creating dynamic routes that will not be built at build time but instead at run time on the server.</p>\n<blockquote>\n<p>🧠   <strong>reminder</strong>: We'll cover prerendering later, so don't overthink right now.</p>\n</blockquote>\n<p>So to create a dynamic route, we can create a file that looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[id].jsx</code></pre></div>\n<p>Where <code class=\"language-text\">id</code> is the name of the parameter. You can name it whatever you want. Those brackets are not a typo or a placeholder; that's the syntax to create a dynamic route using file name conventions in the pages directory. So let's create our note route:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pages\n  notes\n    index.jsx\n    [id].jsx</code></pre></div>\n<p>We can access the <code class=\"language-text\">id</code> param inside our page component using the  <code class=\"language-text\">useRouter</code> hook from the <code class=\"language-text\">next/route</code> module. This comes for free with Next.js.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useRouter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next/router'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span><span class=\"token operator\">=</span> router<span class=\"token punctuation\">.</span>query\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Note: </span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There param name on the query object is the same name as the param name in the file for that page. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">router.query.id\n             |\n             |\n            [id].jsx</code></pre></div>\n<h3 id=\"catch-all-routes\" style=\"position:relative;\"><a href=\"#catch-all-routes\" aria-label=\"catch all routes permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" fill=\"currentColor\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Catch-all routes</h3>\n<p>There's a beautiful feature that Next.js that allows us to define catch-all routes for when we're too lazy to make a page for each one.</p>\n<blockquote>\n<p>👍🏾  <strong>tip</strong>: A lazy developer is a good developer, well, ...sometimes 🙄</p>\n</blockquote>\n<p>What's a catch-all route, you say? Think of a glob.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">this/folder/**</code></pre></div>\n<p>Where <code class=\"language-text\">**</code> means everything inside <code class=\"language-text\">folder</code>. We can do the same with our dynamic routes!\nAll we need is to create a file in our pages directory like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docs/[...param].jsx</code></pre></div>\n<p>So the ellipsis <code class=\"language-text\">...</code> is used in this example to same that this file will represent and route that matches <code class=\"language-text\">/docs/a</code> or <code class=\"language-text\">docs/a/b</code> or <code class=\"language-text\">docs/a/b/c/d/a/b</code>. You get the point. You can then access all the params the same way you do with a single route param. The only difference is the value will be an array of the params in order.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useRouter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next/router'</span>\n\n<span class=\"token comment\">// file => /docs/[...params].jsx</span>\n<span class=\"token comment\">// route => /docs/a/b/c</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span><span class=\"token operator\">=</span> router<span class=\"token punctuation\">.</span>query\n\n  <span class=\"token comment\">// params === ['a', 'b', 'c']</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">hello</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you want to include the parent path in your catch-all route, you can use an optional catch-all route.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docs/[[...param]].jsx</code></pre></div>\n<p>Just add another set of <code class=\"language-text\">[ ]</code> over your catch-all, and now <code class=\"language-text\">/docs</code> will be matched with all of its children. The params value on the <code class=\"language-text\">router.query</code> for the parent path will just be an empty object <code class=\"language-text\">{}</code>.</p>\n<p>So when would you use catch-all routes? I find them useful for when you have a bunch of pages that have pretty similar if not identical layouts and style but have different content and need their own URL. Such things like docs and wikis are a perfect use case.</p>\n<h2 id=\"non-pages\" style=\"position:relative;\"><a href=\"#non-pages\" aria-label=\"non pages permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" fill=\"currentColor\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-pages</h2>\n<p>So pages are special, but what about when you just need a component? Next.js doesn't have any conventions or opinions about that. The community usually creates a <code class=\"language-text\">/src/components</code> folder where all the components live.</p>\n<blockquote>\n<p>🌲   <strong>branch</strong>: git checkout routing-with-pages</p>\n</blockquote>","frontmatter":{"path":"/pages","title":"Routing with Pages","order":"3A","section":"Routing","description":"Learn Next.js with Scott Moss and Frontend Masters"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"6B","path":"/api-handlers","title":"API Handlers"}}},{"node":{"frontmatter":{"order":"6A","path":"/api","title":"API Routes"}}},{"node":{"frontmatter":{"order":"5A","path":"/config","title":"Customizing Next.js config"}}},{"node":{"frontmatter":{"order":"9A","path":"/deployment","title":"Deployment"}}},{"node":{"frontmatter":{"order":"7A","path":"/fetching-data","title":"Fetching Data"}}},{"node":{"frontmatter":{"order":"10A","path":"/final","title":"Final Thoughts"}}},{"node":{"frontmatter":{"order":"2C","path":"/getting-starterd","title":"Getting Started"}}},{"node":{"frontmatter":{"order":"1A","path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":"3B","path":"/navigation","title":"Navigation"}}},{"node":{"frontmatter":{"order":"1B","path":"/overview","title":"Course Overview"}}},{"node":{"frontmatter":{"order":"3A","path":"/pages","title":"Routing with Pages"}}},{"node":{"frontmatter":{"order":"5B","path":"/plugins","title":"Plugins"}}},{"node":{"frontmatter":{"order":"7B","path":"/rendering-modes","title":"Rendering Modes"}}},{"node":{"frontmatter":{"order":"1C","path":"/setup","title":"Setup"}}},{"node":{"frontmatter":{"order":"8A","path":"/working-with-ssr","title":"Working with SSR"}}},{"node":{"frontmatter":{"order":"4A","path":"/styling","title":"Styling"}}},{"node":{"frontmatter":{"order":"4B","path":"/themeui","title":"Theme UI"}}},{"node":{"frontmatter":{"order":"2B","path":"/what-is-nextjs","title":"What is Next.js"}}},{"node":{"frontmatter":{"order":"2A","path":"/what-youll-learn","title":"What you'll learn"}}}]}},"pageContext":{}},"staticQueryHashes":["2959687377"]}