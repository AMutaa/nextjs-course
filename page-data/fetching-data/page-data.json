{"componentChunkName":"component---src-templates-lesson-template-js","path":"/fetching-data","result":{"data":{"markdownRemark":{"html":"<p>There are many ways to fetch data with Next.js. Depending on when you need the data and what you're doing with it, you have options.</p>\n<p>Let's start with what you already know. You can continue to fetch the data client-side to react the same way you do now. Hooks, fetch, etc.</p>\n<blockquote>\n<p>👍🏾  <strong>tip</strong>: Next.js injects <code class=\"language-text\">fetch</code> into your environment.</p>\n</blockquote>\n<blockquote>\n<p>👍🏾  <strong>tip</strong>: Checkout <a href=\"https://swr.vercel.app/\">swr</a> and <a href=\"https://react-query.tanstack.com/\">react-query</a> for your client side data fetching needs.</p>\n</blockquote>\n<p>Now, for fetching data ahead time, we have three options.</p>\n<p><code class=\"language-text\">getStaticProps</code></p>\n<p><code class=\"language-text\">getStaticPaths</code></p>\n<p><code class=\"language-text\">getServerSideProps</code></p>\n<h2 id=\"static-data\" style=\"position:relative;\"><a href=\"#static-data\" aria-label=\"static data permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" fill=\"currentColor\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Static data</h2>\n<p>All of these methods are for prerendering Pages only. You cannot use them in components or client-side data fetching. Let's talk about <code class=\"language-text\">getStaticProps</code> on a page.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// /pages/index.js</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">IndexPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token comment\">// jsx }</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> IndexPage\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>By having your page export <code class=\"language-text\">getStaticPros</code>, Next.js will run this function at <strong>build time</strong>. Whatever your return as props will be passed into the exported page.</p>\n<blockquote>\n<p>🕳   <strong>deep dive</strong>: The results of this function are saved into a JSON file and passed as props to the client's component at runtime.</p>\n</blockquote>\n<p>This function and all other data fetching functions will only ever run on the server. The actual code won't even be bundled with the client code. That means you can do some exciting things here:</p>\n<ul>\n<li>file system work</li>\n<li>connect to a DB</li>\n<li>crawl a website? Yup.</li>\n</ul>\n<p>The <code class=\"language-text\">context</code> object is useful when the page is dynamic. The context will contain the value of the params. This function is not run at runtime in the browser, so where do the params come in?</p>\n<p>That's where <code class=\"language-text\">getStaticPaths</code> come in.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// /pages/blog/:slug.js</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">IndexPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token comment\">// jsx }</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> IndexPage\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticPaths</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// get all the paths for your posts from an API</span>\n  <span class=\"token comment\">// or file system</span>\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/posts'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> results<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> paths <span class=\"token operator\">=</span> posts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>slug<span class=\"token operator\">:</span> \n  post<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">/*\n  [\n    {params: {slug: 'get-started-with-node'}},\n    {params: {slug: 'top-frameworks'}}\n  ]\n  */</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>paths<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api/post/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>params<span class=\"token punctuation\">.</span>slug<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"static-paths\" style=\"position:relative;\"><a href=\"#static-paths\" aria-label=\"static paths permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" fill=\"currentColor\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Static paths</h2>\n<p>If a page has a dynamic path <code class=\"language-text\">[id].jsx</code> and uses <code class=\"language-text\">getStaticProps</code>, it must also use <code class=\"language-text\">getStaticPaths</code> to prerender all the pages at build time into HTML.</p>\n<blockquote>\n<p>👍🏾  <strong>tip</strong>: use <code class=\"language-text\">fallback: true</code> on your return object for <code class=\"language-text\">getStaticPaths</code> if you have a big site and don't want to statically prerender all items at once, and instead opt in to render some later at runtime via SSR.</p>\n</blockquote>\n<h2 id=\"server-data\" style=\"position:relative;\"><a href=\"#server-data\" aria-label=\"server data permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" fill=\"currentColor\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Server data</h2>\n<p>Lastly we have <code class=\"language-text\">getServerSideProps</code>. This will be called at runtime during every request. So unlike <code class=\"language-text\">getStaticProps</code>, you will have the runtime data like query params, HTTP headers, and the req and res objects from API handlers. </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">IndexPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token comment\">// jsx }</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> IndexPage\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getServerSideProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://somedata.com</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"when-to-use-what\" style=\"position:relative;\"><a href=\"#when-to-use-what\" aria-label=\"when to use what permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" fill=\"currentColor\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>When to use what</h2>\n<p><strong>Do you need data at runtime but don't need SSR?</strong>\nUse client-side data fetching.</p>\n<p><strong>Do you need data at runtime but do need SSR?</strong>\nUse <code class=\"language-text\">getServerSideProps</code></p>\n<p><strong>Do you have pages that rely on data that is cachable and accessible at build time? Like from a CMS?</strong>\nUse <code class=\"language-text\">getStaticProps</code></p>\n<p><strong>Do you have the same as above but the pages have dynamic URL params?</strong>\nUse <code class=\"language-text\">getStaticProps</code> and <code class=\"language-text\">getStaticPaths</code></p>\n<h2 id=\"fetch-notes\" style=\"position:relative;\"><a href=\"#fetch-notes\" aria-label=\"fetch notes permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" fill=\"currentColor\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fetch notes</h2>\n<p>We won't get into creating a UI to create notes, so let's just seed our in-memory DB with some notes.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// src/data/data</span>\n<span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">,</span>\n    title<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Note </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Let's fetch some notes from our API in our app now.\nFirst, getting all the notes. Because the notes can be created and are dynamic, we can fetch them client-side or server-side render. Let's do the latter. </p>\n<blockquote>\n<p>⚠️   <strong>warning</strong>: Don't use <code class=\"language-text\">getServerSideProps</code> unless absolutely necessary. Because it computes on every requests, it can be slow.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// pages/note/index.jsx</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getServerSideProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://localhost:3000/api/note/</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>notes<span class=\"token operator\">:</span> data<span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We'll do the same for getting one note. Except, we'll redirect if the request fails.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getServerSideProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>params<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://localhost:3000/api/note/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>params<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// so much power!</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">302</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Location<span class=\"token operator\">:</span> <span class=\"token string\">'/notes'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>note<span class=\"token operator\">:</span> data<span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next, we'll simulate a CMS and fetch the content for the landing page.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">/** @jsx jsx */</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> jsx <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'theme-ui'</span>\n<span class=\"token keyword\">import</span> Link <span class=\"token keyword\">from</span> <span class=\"token string\">'next/link'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">sx</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> height<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">calc(100vh - 60px)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">sx</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>variant<span class=\"token operator\">:</span> <span class=\"token string\">'containers.page'</span><span class=\"token punctuation\">,</span> display<span class=\"token operator\">:</span> <span class=\"token string\">'flex'</span><span class=\"token punctuation\">,</span> alignItems<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token string\">'100%'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">sx</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>fontSize<span class=\"token operator\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> my<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> \n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      content<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        title<span class=\"token operator\">:</span> <span class=\"token string\">'Look at my note app tho'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next.js just keeps improving when it comes to data fetching; it's by far my favorite part. Little to no overhead and extremely powerful. It makes developing open-source that integrates with Next.js a breeze.</p>\n<blockquote>\n<p>🌲   <strong>branch</strong>: <code class=\"language-text\">git checkout data-fetching</code></p>\n</blockquote>","frontmatter":{"path":"/fetching-data","title":"Fetching Data","order":"7A","section":"Data Fetching","description":"Learn Next.js with Scott Moss and Frontend Masters"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"6B","path":"/api-handlers","title":"API Handlers"}}},{"node":{"frontmatter":{"order":"6A","path":"/api","title":"API Routes"}}},{"node":{"frontmatter":{"order":"5A","path":"/config","title":"Customizing Next.js config"}}},{"node":{"frontmatter":{"order":"9A","path":"/deployment","title":"Deployment"}}},{"node":{"frontmatter":{"order":"7A","path":"/fetching-data","title":"Fetching Data"}}},{"node":{"frontmatter":{"order":"10A","path":"/final","title":"Final Thoughts"}}},{"node":{"frontmatter":{"order":"2C","path":"/getting-starterd","title":"Getting Started"}}},{"node":{"frontmatter":{"order":"1A","path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":"3B","path":"/navigation","title":"Navigation"}}},{"node":{"frontmatter":{"order":"1B","path":"/overview","title":"Course Overview"}}},{"node":{"frontmatter":{"order":"3A","path":"/pages","title":"Routing with Pages"}}},{"node":{"frontmatter":{"order":"5B","path":"/plugins","title":"Plugins"}}},{"node":{"frontmatter":{"order":"7B","path":"/rendering-modes","title":"Rendering Modes"}}},{"node":{"frontmatter":{"order":"1C","path":"/setup","title":"Setup"}}},{"node":{"frontmatter":{"order":"8A","path":"/working-with-ssr","title":"Working with SSR"}}},{"node":{"frontmatter":{"order":"4A","path":"/styling","title":"Styling"}}},{"node":{"frontmatter":{"order":"4B","path":"/themeui","title":"Theme UI"}}},{"node":{"frontmatter":{"order":"2B","path":"/what-is-nextjs","title":"What is Next.js"}}},{"node":{"frontmatter":{"order":"2A","path":"/what-youll-learn","title":"What you'll learn"}}}]}},"pageContext":{}},"staticQueryHashes":["2959687377"]}